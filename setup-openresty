#!/usr/bin/env sh
set -e

case "$0" in
  /*) my_dir=$(dirname "$0") ;;
  *) my_dir=$(dirname "$(pwd)/${0#./}") ;;
esac

. ${my_dir}/versions

if test -f /etc/os-release ; then
  DISTRO=$(. /etc/os-release && printf "${ID}" )
  RELEASE=$(. /etc/os-release && printf "${VERSION_ID}" )
elif test -f /etc/fedora-release ; then
  DISTRO="fedora"
  RELEASE="Unknown"
elif test -f /etc/debian_version ; then
  DISTRO="debian"
  RELEASE="Unknown"
elif test -f /etc/redhat-release ; then
  DISTRO="centos"
  RELEASE="Unknown"
elif test -f /etc/alpine-release ; then
  DISTRO="alpine"
  RELEASE="Unknown"
fi

if test -z "${DISTRO}" ; then
  if uname | grep -i darwin >/dev/null 2>&1 ; then
    DISTRO="osx"
    RELEASE="unknown"
  fi
fi

if test -z "${DISTRO}" ; then
  printf "Unable to determine distro\n"
  exit 1
fi


# defaults
PREFIX="/opt/openresty-${OPENRESTY_VERSION}"
nprocs=1
make_symlinks=0
use_sudo=0
use_libressl=1
use_openssl=0

#default on modules
select=1
poll=1
http_charset=1
http_gzip=1
http_ssi=1
http_userid=1
http_access=1
http_auth_basic=1
http_autoindex=1
http_geo=1
http_map=1
http_split_clients=1
http_referer=1
http_rewrite=1
http_proxy=1
http_fastcgi=1
http_uwsgi=1
http_scgi=1
http_memcached=1
http_limit_conn=1
http_limit_req=1
http_empty_gif=1
http_browser=1
http_upstream_hash=1
http_upstream_ip_hash=1
http_upstream_least_conn=1
http_upstream_keepalive=1
http_upstream_zone=1
mail_pop3=1
mail_imap=1
mail_smtp=1
stream_limit_conn=1
stream_access=1
stream_map=1
stream_return=1
stream_upstream_hash=1
stream_upstream_least_conn=1
stream_upstream_zone=1

#default on openresty modules
http_echo=1
http_xss=1
http_coolkit=1
http_set_misc=1
http_form_input=1
http_encrypted_session=1
http_srcache=1
http_lua=1
http_lua_upstream=1
http_headers_more=1
http_array_var=1
http_memc=1
http_redis2=1
http_redis=1
http_rds_json=1
http_rds_csv=1
http_ssl=1
ngx_devel_kit=1
stream_lua=1


#default on not-modules
http=1

#default off
http_addition=0
http_auth_request=0
http_dav=0
http_flv=0
http_geoip=0
http_gunzip=0
http_gzip_static=0
http_image_filter=0
http_mp4=0
http_random_index=0
http_realip=0
http_secure_link=0
http_slice=0
http_stub_status=0
http_sub=0
http_v2=0
http_xslt=0
mail=0
mail_ssl=0
http_drizzle=0
http_postgres=0
http_iconv=0
stream=0
stream_ssl=0

# external modules installed with this script
rtmp=0
flv=0
ngx_lua_ipc=0
nchan=0
lua_io=0
lua_var_ngx=0

if command -v nproc >/dev/null 2>&1 ; then
  nprocs=$(nproc)
fi

for opt in "$@" ; do
    case "$opt" in
      --use-system-ssl)
        use_libressl=0
        use_openssl=0
        ;;
      --use-openssl)
        use_libressl=0
        use_openssl=1
        ;;
      --use-openssl=*)
        use_libressl=0
        use_openssl=1
        OPENSSL_VERSION=$(printf '%s' "$opt" | cut -d'=' -f2)
        ;;
      --use-libressl)
        use_libressl=1
        use_openssl=0
        ;;
      --use-libressl=*)
        use_libressl=1
        use_openssl=0
        LIBRESSL_VERSION=$(printf '%s' "$opt" | cut -d'=' -f2)
        ;;
      --use-sudo)
        use_sudo=1
        ;;
      --symlink)
        make_symlinks=1
        ;;
      --prefix=*)
        PREFIX=$(printf '%s' "$opt" | cut -d'=' -f2)
        ;;
      --with-*)
        opt=$(printf '%s' "$opt" | tr '-' '_')
        opt=${opt%_module}
        var=${opt#__with_}
        eval "${var}=1"
        ;;
      --with_*)
        opt=$(printf '%s' "$opt" | tr '-' '_')
        opt=${opt%_module}
        var=${opt#__with_}
        eval "${var}=1"
        ;;
      --without-*)
        opt=$(printf '%s' "$opt" | tr '-' '_')
        opt=${opt%_module}
        var=${opt#__with_}
        eval "${var}=0"
        ;;
      --without_*)
        opt=$(printf '%s' "$opt" | tr '-' '_')
        opt=${opt%_module}
        var=${opt#__with_}
        eval "${var}=0"
        ;;
      --minimal)
        http_charset=0
        http_gzip=0
        http_ssi=0
        http_userid=0
        http_access=0
        http_auth_basic=0
        http_autoindex=0
        http_geo=0
        http_map=0
        http_split_clients=0
        http_referer=0
        http_rewrite=0
        http_proxy=0
        http_fastcgi=0
        http_uwsgi=0
        http_scgi=0
        http_memcached=0
        http_limit_conn=0
        http_limit_req=0
        http_empty_gif=0
        http_browser=0
        http_upstream_hash=0
        http_upstream_ip_hash=0
        http_upstream_least_conn=0
        http_upstream_keepalive=0
        http_upstream_zone=0
        mail_pop3=0
        mail_imap=0
        mail_smtp=0
        stream_limit_conn=0
        stream_access=0
        stream_map=0
        stream_return=0
        stream_upstream_hash=0
        stream_upstream_least_conn=0
        stream_upstream_zone=0
        http_echo=0
        http_xss=0
        http_coolkit=0
        http_set_misc=0
        http_form_input=0
        http_encrypted_session=0
        http_srcache=0
        http_lua=0
        http_lua_upstream=0
        http_headers_more=0
        http_array_var=0
        http_memc=0
        http_redis2=0
        http_redis=0
        http_rds_json=0
        http_rds_csv=0
        ngx_devel_kit=0
        http_addition=0
        http_auth_request=0
        http_dav=0
        http_flv=0
        http_geoip=0
        http_gunzip=0
        http_gzip_static=0
        http_image_filter=0
        http_mp4=0
        http_random_index=0
        http_realip=0
        http_secure_link=0
        http_slice=0
        http_ssl=0
        http_stub_status=0
        http_sub=0
        http_v2=0
        http_xslt=0
        mail=0
        mail_ssl=0
        http_drizzle=0
        http_postgres=0
        http_iconv=0
        stream=0
        stream_ssl=0
        stream_lua=0
        rtmp=0
        flv=0
        ngx_lua_ipc=0
        nchan=0
        lua_io=0
        lua_var_ngx=0
        ;;
      --large)
        # don't enable drizzle/postgres/iconv
        http_addition=1
        http_auth_request=1
        http_dav=1
        http_flv=1
        http_geoip=1
        http_gunzip=1
        http_gzip_static=1
        http_image_filter=1
        http_mp4=1
        http_random_index=1
        http_realip=1
        http_secure_link=1
        http_slice=1
        http_ssl=1
        http_stub_status=1
        http_sub=1
        http_v2=1
        http_xslt=1
        mail=1
        mail_ssl=1
        #http_drizzle=1
        #http_postgres=1
        #http_iconv=1
        stream=1
        stream_ssl=1
        stream_lua=1
        rtmp=0
        flv=1
        ngx_lua_ipc=1
        nchan=1
        lua_io=1
        lua_var_ngx=1
       ;;
      --all-mods)
        rtmp=0
        flv=1
        ngx_lua_ipc=1
        nchan=1
        lua_io=1
        lua_var_ngx=1
        ;;
    esac
done

if test "$(id -u)" != "0" ; then
  if test "${DISTRO}" != "osx" && test $use_sudo -eq 0 ; then
    printf "This script requires root privileges to install packages\n"
    printf "Run with --use-sudo to prompt using sudo\n"
    exit 1
  fi
fi

if test $rtmp -eq 1 && test $flv -eq 1 ; then
  printf "The FLV and RTMP modules are both enabled, but they conflict.\n"
  printf "Disabling the RTMP module in favor of the FLV module.\n"
  rtmp=0
fi

if ! test command -v pushd 1>/dev/null 2>&1 ; then
pushd() {
    if test -z "PUSHD_STACK" ; then
        PUSHD_STACK="$PWD"
    else
        PUSHD_STACK="$PUSHD_STACK;$PWD"
    fi
    cd "$1"
}
popd() {
    if test -n ${IFS+x} ; then
      OLDIFS="${IFS}"
    fi
    IFS=";"
    NEW_PUSHD_STACK=""
    NEW_DIR=""
    for dir in ${PUSHD_STACK} ; do
      if test -z "${NEW_DIR}" ; then
        NEW_DIR="${dir}"
      else
        if test -z "${NEW_PUSHD_STACK}" ; then
          NEW_PUSHD_STACK="${NEW_DIR}"
        else
          NEW_PUSHD_STACK="${NEW_PUSHD_STACK};${NEW_DIR}"
        fi
        NEW_DIR="${dir}"
      fi
    done
    if test -n ${OLDIFS+x} ; then
      IFS="${OLDIFS}"
    else
      unset IFS
    fi
    cd "${NEW_DIR}"
    PUSHD_STACK="${NEW_PUSHD_STACK}"
    unset NEW_PUSHD_STACK
    unset NEW_DIR
}
fi

download() {
  if ! test -f ${my_dir}/src/"${2}" ; then
    curl -s -S -R -L -o ${my_dir}/src/"${2}" \
      "${1}"
  fi
}

extract() {
  if ! test -d ${my_dir}/src/${1} ; then
    case "${2}" in
      ".tar.gz")  tar xzf "${my_dir}/src/${1}${2}" -C ${my_dir}/src ;;
      ".tar.bz2") tar xjf "${my_dir}/src/${1}${2}" -C ${my_dir}/src ;;
      ".tar.xz")  tar xJf "${my_dir}/src/${1}${2}" -C ${my_dir}/src ;;
      *) printf "Unknown file format" ; exit 1 ;;
    esac
    if test -d ${my_dir}/patches/${1} ; then
      pushd ${my_dir}/src/$1
      for p in ${my_dir}/patches/${1}/*.patch ; do
        patch -p1 < ${p}
      done
      popd
    fi
  fi
}


if test "${DISTRO}" = "ubuntu"; then
  libgd_xpm_dev=libgd2-xpm-dev
  # On 18.04, libgd2-xpm-dev virtual package doesn't exists
  # According to https://packages.ubuntu.com/xenial/libgd2-xpm-dev
  # It's a virtual package and it seems libgd-dev provides the necessary
  # development headers?
  if test "${RELEASE}" = "18.04"; then
    libgd_xpm_dev=libgd-dev
  fi
  UPDATE_CMD="apt-get update"
  INSTALL_CMD="apt-get install -y"
  PACKAGE_LIST="linux-headers-generic libxslt-dev ${libgd_xpm_dev} libgeoip-dev zlib1g-dev libreadline-dev libncurses5-dev libpcre3-dev perl make gcc unzip curl git patch tar gzip"
  if test $use_libressl -eq 0 && test $use_openssl -eq 0 ; then
    PACKAGE_LIST="$PACKAGE_LIST libssl-dev"
  fi

elif test "${DISTRO}" = "debian" ; then
  UPDATE_CMD="apt-get update"
  INSTALL_CMD="apt-get install -y"
  PACKAGE_LIST="linux-headers-amd64 libxslt-dev libgd2-xpm-dev libgeoip-dev zlib1g-dev libreadline-dev libncurses5-dev libpcre3-dev perl make gcc unzip curl git patch tar gzip"
  if test $use_libressl -eq 0 && test $use_openssl -eq 0 ; then
    PACKAGE_LIST="$PACKAGE_LIST libssl-dev"
  fi

elif test "${DISTRO}" = "centos" -o "${DISTRO}" = "rhel" ; then
  INSTALL_CMD="yum install -y"
  PACKAGE_LIST="kernel-headers libxslt-devel gd-devel readline-devel ncurses-devel pcre-devel perl make gcc unzip curl git patch tar gzip libcurl-devel zlib* xz xz-devel readline-devel"
  if test $use_libressl -eq 0 && test $use_openssl -eq 0 ; then
    PACKAGE_LIST="$PACKAGE_LIST openssl-devel"
  fi

elif test "${DISTRO}" = "fedora" ; then
  INSTALL_CMD="dnf install -y"
  PACKAGE_LIST="kernel-headers libxslt-devel gd-devel geoip-devel zlib-devel readline-devel ncurses-devel pcre-devel perl make gcc unzip curl git patch tar gzip"
  if test $use_libressl -eq 0 && test $use_openssl -eq 0 ; then
    PACKAGE_LIST="$PACKAGE_LIST openssl-devel"
  fi

elif test "${DISTRO}" = "alpine" ; then
  UPDATE_CMD="apk update"
  INSTALL_CMD="apk add"
  PACKAGE_LIST="linux-headers gd-dev geoip-dev libxslt-dev musl-dev zlib-dev readline-dev ncurses-dev pcre-dev perl make unzip curl git patch gcc tar gzip"
  if test $use_libressl -eq 0 && test $use_openssl -eq 0 ; then
    PACKAGE_LIST="$PACKAGE_LIST openssl-dev"
  fi

elif test "${DISTRO}" = "opensuse" ; then
  INSTALL_CMD="zypper install -y"
  PACKAGE_LIST="kernel-headers libxslt-devel gd-devel libGeoIP-devel zlib-devel readline-devel ncurses-devel pcre-devel perl make gcc unzip curl git patch tar gzip"
  if test $use_libressl -eq 0 && test $use_openssl -eq 0 ; then
    PACKAGE_LIST="$PACKAGE_LIST openssl-devel"
  fi

elif test "${DISTRO}" = "arch" ; then
  UPDATE_CMD="pacman -Sy"
  INSTALL_CMD="pacman -S --needed --noconfirm"
  PACKAGE_LIST="linux-headers libxslt gd geoip zlib readline ncurses pcre perl make gcc unzip curl git patch tar gzip"
  if test $use_libressl -eq 0 && test $use_openssl -eq 0 ; then
    PACKAGE_LIST="$PACKAGE_LIST openssl"
  fi

elif test "${DISTRO}" = "osx" ; then
  UPDATE_CMD="brew update"
  INSTALL_CMD="brew install"
  PACKAGE_LIST="gd geoip pcre"

fi

if test -z "${INSTALL_CMD}" ; then
  printf "${DISTRO} is not supported - please open an issue\n"
  exit 1
fi

if test $use_sudo -ne 0 ; then
  UPDATE_CMD="sudo ${UPDATE_CMD}"
  INSTALL_CMD="sudo ${INSTALL_CMD}"
fi

PACKAGE_LOGFILE=$(mktemp)

#printf "Installing packages: ${PACKAGE_LIST}\n" | tee -a $PACKAGE_LOGFILE
#
#if test -n "${UPDATE_CMD}" ; then
#  ${UPDATE_CMD} 2>&1 | tee -a $PACKAGE_LOGFILE
#fi
#${INSTALL_CMD} ${PACKAGE_LIST} 2>&1 | tee -a $PACKAGE_LOGFILE

if ! test -d "${my_dir}/src" ; then
  mkdir "${my_dir}/src"
fi

if ! test -d "${PREFIX}" ; then
  if ! mkdir "${PREFIX}" >/dev/null 2>&1 ; then
    if test $use_sudo -ne 0 ; then
      if sudo mkdir "${PREFIX}" ; then
        sudo chown "$(id -u -n):$(id -g -n)" "${PREFIX}"
      else
        printf "Error, unable to create ${PREFIX}\n"
        exit 1
      fi
    fi
  fi
fi

DOWNLOAD_LOGFILE=$(mktemp)

printf "Downloading sources (details in ${DOWNLOAD_LOGFILE})\n" | tee -a $DOWNLOAD_LOGFILE

printf "Downloading OpenResty ${OPENRESTY_VERSION}\n" | tee -a $DOWNLOAD_LOGFILE
download \
  "https://openresty.org/download/openresty-${OPENRESTY_VERSION}.tar.gz" \
  "openresty-${OPENRESTY_VERSION}.tar.gz" 2>&1 | tee -a ${DOWNLOAD_LOGFILE}

printf "Downloading LuaRocks ${LUAROCKS_VERSION}\n" | tee -a ${DOWNLOAD_LOGFILE}
download \
  "https://luarocks.github.io/luarocks/releases/luarocks-${LUAROCKS_VERSION}.tar.gz" \
  "luarocks-${LUAROCKS_VERSION}.tar.gz" 2>&1 | tee -a ${DOWNLOAD_LOGFILE}

printf "Downloading Lua ${LUA_VERSION}\n" | tee -a ${DOWNLOAD_LOGFILE}
download \
  "https://www.lua.org/ftp/lua-${LUA_VERSION}.tar.gz" \
  "lua-${LUA_VERSION}.tar.gz" 2>&1 | tee -a ${DOWNLOAD_LOGFILE}

if test $rtmp -eq 1 ; then
  printf "Downloading RTMP Module ${NGINX_RTMP_MODULE_VERSION}\n" | tee -a ${DOWNLOAD_LOGFILE}
  download \
    "https://github.com/arut/nginx-rtmp-module/archive/v${NGINX_RTMP_MODULE_VERSION}.tar.gz" \
    "nginx-rtmp-module-${NGINX_RTMP_MODULE_VERSION}.tar.gz" 2>&1 | tee -a ${DOWNLOAD_LOGFILE}
fi

if test $flv -eq 1 ; then
  printf "Downloading FLV module ${NGINX_HTTP_FLV_MODULE_VERSION}\n" | tee -a ${DOWNLOAD_LOGFILE}
  download \
    "https://github.com/winshining/nginx-http-flv-module/archive/v${NGINX_HTTP_FLV_MODULE_VERSION}.tar.gz" \
    "nginx-http-flv-module-${NGINX_HTTP_FLV_MODULE_VERSION}.tar.gz" 2>&1 | tee -a ${DOWNLOAD_LOGFILE}
fi

if test $ngx_lua_ipc -eq 1 ; then
  printf "Downloading Nginx Lua IPC Module ${NGX_LUA_IPC_VERSION}\n" | tee -a ${DOWNLOAD_LOGFILE}
  download \
    "https://github.com/slact/ngx_lua_ipc/archive/v${NGX_LUA_IPC_VERSION}.tar.gz" \
    "ngx_lua_ipc-${NGX_LUA_IPC_VERSION}.tar.gz" 2>&1 | tee -a ${DOWNLOAD_LOGFILE}
fi

if test $nchan -eq 1 ; then
  printf "Downloading nchan Module ${NCHAN_VERSION}\n" | tee -a ${DOWNLOAD_LOGFILE}
  download \
    "https://github.com/slact/nchan/archive/v${NCHAN_VERSION}.tar.gz" \
    "nchan-${NCHAN_VERSION}.tar.gz" 2>&1 | tee -a ${DOWNLOAD_LOGFILE}
fi

if test $lua_io -eq 1 ; then
  printf "Downloading lua-io module ${LUA_IO_VERSION}\n" | tee -a ${DOWNLOAD_LOGFILE}
  download \
    "https://github.com/tokers/lua-io-nginx-module/archive/${LUA_IO_VERSION}.tar.gz" \
    "lua-io-nginx-module-${LUA_IO_VERSION}.tar.gz" 2>&1 | tee -a ${DOWNLOAD_LOGFILE}
fi

if test $lua_var_ngx -eq 1 ; then
  printf "Downloading lua-var module ${LUA_VAR_NGX_VERSION}\n" | tee -a ${DOWNLOAD_LOGFILE}
  download \
    "https://github.com/api7/lua-var-nginx-module/archive/v${LUA_VAR_NGX_VERSION}.tar.gz" \
    "lua-var-nginx-module-${LUA_VAR_NGX_VERSION}.tar.gz" 2>&1 | tee -a ${DOWNLOAD_LOGFILE}
fi

if test $use_libressl -eq 1 ; then
  printf "Downloading LibreSSL ${LIBRESSL_VERSION}\n" | tee -a ${DOWNLOAD_LOGFILE}
  download \
    "http://www.mirrorservice.org/pub/OpenBSD/LibreSSL/libressl-${LIBRESSL_VERSION}.tar.gz" \
    "libressl-${LIBRESSL_VERSION}.tar.gz" 2>&1 | tee -a ${DOWNLOAD_LOGFILE}
fi

if test $use_openssl -eq 1 ; then
  printf "Downloading OpenSSL ${OPENSSL_VERSION}\n" | tee -a ${DOWNLOAD_LOGFILE}
  download \
    "https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz" \
    "openssl-${OPENSSL_VERSION}.tar.gz" 2>&1 | tee -a ${DOWNLOAD_LOGFILE}
fi

printf "Extracting sources\n"

printf "Extracting OpenResty...\n"
extract "openresty-${OPENRESTY_VERSION}" ".tar.gz"

printf "Extracting LuaRocks...\n"
extract "luarocks-${LUAROCKS_VERSION}" ".tar.gz"

printf "Extracting Lua...\n"
extract "lua-${LUA_VERSION}" ".tar.gz"

if test $rtmp -eq 1 ; then
  printf "Extracting RTMP module\n"
  extract "nginx-rtmp-module-${NGINX_RTMP_MODULE_VERSION}" ".tar.gz"
fi

if test $flv -eq 1 ; then
  printf "Extracting FLV module\n"
  extract "nginx-http-flv-module-${NGINX_HTTP_FLV_MODULE_VERSION}" ".tar.gz"
fi

if test $ngx_lua_ipc -eq 1 ; then
  printf "Extracting Lua IPC module\n"
  extract "ngx_lua_ipc-${NGX_LUA_IPC_VERSION}" ".tar.gz"
fi

if test $nchan -eq 1 ; then
  printf "Extracting NChan...\n"
  extract "nchan-${NCHAN_VERSION}" ".tar.gz"
fi

if test $lua_io -eq 1 ; then
  printf "Extracting lua-io\n"
  extract "lua-io-nginx-module-${LUA_IO_VERSION}" ".tar.gz"
fi

if test $lua_var_ngx -eq 1 ; then
  printf "Extracting lua-var\n"
  extract "lua-var-nginx-module-${LUA_VAR_NGX_VERSION}" ".tar.gz"
fi

if test $use_libressl -eq 1 ; then
  printf "Extracting LibreSSL...\n"
  extract "libressl-${LIBRESSL_VERSION}" ".tar.gz"
fi

if test $use_openssl -eq 1 ; then
  printf "Extracting OpenSSL...\n"
  extract "openssl-${OPENSSL_VERSION}" ".tar.gz"
fi

openresty_options=""
openresty_modules=""

for opt in \
  'http' ; do
  eval "val=\$${opt}"
  if [ ${val} -eq 0 ] ; then
    openresty_options="${openresty_options} --without-${opt}"
  fi
done

for opt in \
  'stream' \
  'mail' ; do
  eval "val=\$${opt}"
  if [ ${val} -eq 1 ] ; then
    openresty_options="${openresty_options} --with-${opt}"
  fi
done

for mod_opt in \
  'http_addition' \
  'http_auth_request' \
  'http_dav' \
  'http_flv' \
  'http_geoip' \
  'http_gunzip' \
  'http_gzip_static' \
  'http_image_filter' \
  'http_mp4' \
  'http_random_index' \
  'http_realip' \
  'http_secure_link' \
  'http_slice' \
  'http_stub_status' \
  'http_sub' \
  'http_v2' \
  'http_xslt' \
  'http_drizzle' \
  'http_postgres' \
  'http_iconv' \
  'mail_ssl' \
  'stream_ssl' ; do
  eval "mod_val=\$${mod_opt}"
  if [ ${mod_val} -eq 1 ] ; then
    openresty_options="${openresty_options} --with-${mod_opt}_module"
  fi
done

for mod_opt in \
  'select' \
  'poll' \
  'http_charset' \
  'http_gzip' \
  'http_ssi' \
  'http_userid' \
  'http_access' \
  'http_auth_basic' \
  'http_autoindex' \
  'http_geo' \
  'http_ssl' \
  'http_map' \
  'http_split_clients' \
  'http_referer' \
  'http_rewrite' \
  'http_proxy' \
  'http_fastcgi' \
  'http_uwsgi' \
  'http_scgi' \
  'http_memcached' \
  'http_limit_conn' \
  'http_limit_req' \
  'http_empty_gif' \
  'http_browser' \
  'http_upstream_hash' \
  'http_upstream_ip_hash' \
  'http_upstream_least_conn' \
  'http_upstream_keepalive' \
  'http_upstream_zone' \
  'mail_pop3' \
  'mail_imap' \
  'mail_smtp' \
  'stream_limit_conn' \
  'stream_access' \
  'stream_map' \
  'stream_return' \
  'stream_upstream_hash' \
  'stream_upstream_least_conn' \
  'stream_upstream_zone' \
  'http_echo' \
  'http_xss' \
  'http_coolkit' \
  'http_set_misc' \
  'http_form_input' \
  'http_encrypted_session' \
  'http_srcache' \
  'http_lua' \
  'http_lua_upstream' \
  'http_headers_more' \
  'http_array_var' \
  'http_memc' \
  'http_redis2' \
  'http_redis' \
  'http_rds_json' \
  'http_rds_csv' \
  'stream_lua' \
  'ngx_devel_kit' ; do
  eval "mod_val=\$${mod_opt}"
  if [ ${mod_val} -eq 0 ] ; then
    openresty_options="${openresty_options} --without-${mod_opt}_module"
  fi
done

for ext_mod_opt in \
  'flv' \
  'rtmp' \
  'ngx_lua_ipc' \
  'nchan' \
  'lua_io' \
  'lua_var_ngx' \
  ; do
  eval "mod_val=\$${ext_mod_opt}"
  if [ ${mod_val} -eq 1 ] ; then
    eval "mod_path=\$${ext_mod_opt}_path"
    openresty_modules="${openresty_modules} --add-module=${my_dir}/src/${mod_path}"
  fi
done

SSL_INSTALL_NEEDED=0
OPENRESTY_INSTALL_NEEDED=0

if test $use_libressl -eq 1 ; then
  OURSSL_NAME=LibreSSL
  OURSSL_VERSION=$LIBRESSL_VERSION
  OURSSL_PATH=libressl
  OURSSL_CONFIGURE=./configure
  OURSSL_OPTS="--enable-shared --enable-static"
fi

if test $use_openssl -eq 1 ; then
  OURSSL_NAME=OpenSSL
  OURSSL_VERSION=$OPENSSL_VERSION
  OURSSL_PATH=openssl
  OURSSL_CONFIGURE=./config
  OURSSL_OPTS="--openssldir=${PREFIX} -Wl,-rpath=${PREFIX}/lib --libdir=${PREFIX}/lib shared"
fi

if test $use_libressl -eq 1 || test $use_openssl -eq 1 ; then
  if ! test -f "$PREFIX/bin/openssl" ; then
    SSL_INSTALL_NEEDED=1
    OPENRESTY_INSTALL_NEEDED=1
  elif test "$($PREFIX/bin/openssl version | cut -f2 -d' ')" != "${OURSSL_VERSION}" ; then
    SSL_INSTALL_NEEDED=1
    OPENRESTY_INSTALL_NEEDED=1
  fi

  if test ${SSL_INSTALL_NEEDED} -eq 1 ; then
    LIBRESSL_LOGFILE=$(mktemp)

    printf "Configuring ${OURSSL_NAME} ${OURSSL_VERSION} (log at ${LIBRESSL_LOGFILE})\n" | tee -a $LIBRESSL_LOGFILE
    pushd ${my_dir}/src/${OURSSL_PATH}-${OURSSL_VERSION}
    make clean >/dev/null 2>&1 || true
    LDFLAGS="-s" \
    ${OURSSL_CONFIGURE} \
      --prefix=$PREFIX \
      ${OURSSL_OPTS} >> $LIBRESSL_LOGFILE 2>&1
    printf "Building ${OURSSL_NAME}\n" | tee -a $LIBRESSL_LOGFILE
    make -j$nprocs >>$LIBRESSL_LOGFILE 2>&1
    printf "Installing ${OURSSL_NAME}\n" | tee -a $LIBRESSL_LOGFILE
    make install >>$LIBRESSL_LOGFILE 2>&1
    popd
    printf "Done installing ${OURSSL}\n" | tee -a $LIBRESSL_LOGFILE
  fi
fi

if ! test -f "$PREFIX/bin/openresty" ; then
  OPENRESTY_INSTALL_NEEDED=1
else
  if test "$($PREFIX/bin/openresty -V 2>&1 | grep "built with ${OURSSL_NAME}" | cut -d' ' -f4)" != "${OURSSL_VERSION}" ; then
    OPENRESTY_INSTALL_NEEDED=1
  elif test "$($PREFIX/bin/openresty -V 2>&1 | grep 'nginx version:' | cut -d'/' -f2)" != "${OPENRESTY_VERSION}" ; then
    OPENRESTY_INSTALL_NEEDED=1
  fi
fi

_file_aio=""
if test "${DISTRO}" != "osx" ; then
  _file_aio="--with-file-aio"
fi

if test ${OPENRESTY_INSTALL_NEEDED} -eq 1 ; then
  OPENRESTY_LOGFILE=$(mktemp)
  printf "Configuring OpenResty ${OPENRESTY_VERSION} (log at ${OPENRESTY_LOGFILE})\n" | tee -a $OPENRESTY_LOGFILE
  pushd ${my_dir}/src/openresty-${OPENRESTY_VERSION}
  eval "set -- '--prefix=$PREFIX' ${_file_aio} '--with-ipv6' '--with-md5-asm' '--with-pcre-jit' '--with-sha1-asm' '--with-threads' ${openresty_options} ${openresty_modules} '--with-cc-opt=-I$PREFIX/include' '--with-ld-opt=-s -Wl,-rpath,$PREFIX/lib:$PREFIX/luajit/lib -L$PREFIX/lib'"
  printf './configure ' | tee -a $OPENRESTY_LOGFILE
  printf '%s ' "$@" | tee -a $OPENRESTY_LOGFILE
  printf '\n' | tee -a $OPENRESTY_LOGFILE
  ./configure "$@" >> $OPENRESTY_LOGFILE
  printf "Building OpenResty\n" | tee -a $OPENRESTY_LOGFILE
  make -j$nprocs >> $OPENRESTY_LOGFILE 2>&1
  printf "Installing OpenResty\n" | tee -a $OPENRESTY_LOGFILE
  make install >> $OPENRESTY_LOGFILE 2>&1
  popd
  printf "Done installing OpenResty\n" | tee -a $OPENRESTY_LOGFILE
fi

_lua_platform="linux"
if test "${DISTRO}" = "osx" ; then
  _lua_platform="macosx"
fi

if ! test -f "$PREFIX/luajit/bin/lua" ; then
  LUA_LOGFILE=$(mktemp)
  printf "Installing Lua ${LUA_VERSION} (log at ${LUA_LOGFILE})\n" | tee -a $LUA_LOGFILE
  pushd ${my_dir}/src/lua-${LUA_VERSION}
  if ! test -f "src/luaconf.h.orig" ; then
    mv src/luaconf.h src/luaconf.h.orig
  fi
  sed -e "s,/usr/local,$PREFIX/luajit,g" < src/luaconf.h.orig > src/luaconf.h
  make TO_LIB="liblua.a liblua.so" clean >> $LUA_LOGFILE 2>&1
  make -j$nprocs CFLAGS="-fPIC -O2 -Wall -DLUA_USE_LINUX" ${_lua_platform} >> $LUA_LOGFILE 2>&1
  make INSTALL_TOP="$PREFIX/luajit" TO_LIB="liblua.a liblua.so" install >> $LUA_LOGFILE 2>&1
  popd
  printf "Done installing Lua\n" | tee -a $LUA_LOGFILE
fi

if test ! -f "$PREFIX/luajit/bin/luarocks" ; then
  LUAROCKS_LOGFILE=$(mktemp)
  printf "Installing Luarocks ${LUAROCKS_VERSION} (log at ${LUAROCKS_LOGFILE})\n" | tee -a $LUAROCKS_LOGFILE
  pushd ${my_dir}/src/luarocks-${LUAROCKS_VERSION}
  make clean >/dev/null 2>&1 || true
  ./configure \
    --prefix=$PREFIX/luajit \
    --with-lua=$PREFIX/luajit >> $LUAROCKS_LOGFILE 2>&1
  make build >> $LUAROCKS_LOGFILE 2>&1
  make install >> $LUAROCKS_LOGFILE 2>&1
  cat <<EOF >$PREFIX/luajit/etc/luarocks/config-5.1.lua
rocks_trees = {
   { name = [[user]], root = home..[[/.luarocks]] },
   { name = [[system]],
     root = [[$PREFIX/luajit]],
     bin_dir = [[$PREFIX/bin]],
   }
}

external_deps_dirs = {
  [[$PREFIX]],
  [[/usr/local]],
  [[/usr]],
}

variables = {
  LUA        = [[$PREFIX/luajit/bin/lua]],
  LUA_BINDIR = [[$PREFIX/luajit/bin]],
  LUA_INCDIR = [[$PREFIX/luajit/include]],
  LUA_LIBDIR = [[$PREFIX/luajit/lib]],
}

EOF
  popd
  printf "Done installing LuaRocks\n" | tee -a $LUAROCKS_LOGFILE
fi

if test ! -e "$PREFIX/bin/lua" ; then
  ln -s "${PREFIX}/luajit/bin/lua" "${PREFIX}/bin/lua"
fi

if test ! -e "$PREFIX/bin/luac" ; then
  ln -s "${PREFIX}/luajit/bin/luac" "${PREFIX}/bin/luac"
fi

if test ! -e "$PREFIX/bin/luajit" ; then
  ln -s "${PREFIX}/luajit/bin/luajit" "${PREFIX}/bin/luajit"
fi

if test ! -e "$PREFIX/bin/luarocks" ; then
  ln -s "${PREFIX}/luajit/bin/luarocks" "${PREFIX}/bin/luarocks"
fi

if test ${make_symlinks} -eq 1 ; then
  ln -s $PREFIX/luajit/bin/lua      /usr/local/bin/lua-openresty
  ln -s $PREFIX/luajit/bin/luac     /usr/local/bin/luac-openresty
  ln -s $PREFIX/luajit/bin/luajit   /usr/local/bin/luajit-openresty
  ln -s $PREFIX/bin/luarocks        /usr/local/bin/luarocks-openresty
  ln -s $PREFIX/bin/resty           /usr/local/bin/resty
  ln -s $PREFIX/bin/restydoc        /usr/local/bin/restydoc
  ln -s $PREFIX/bin/restydoc-index  /usr/local/bin/restydoc-index
  ln -s $PREFIX/bin/openresty       /usr/local/bin/openresty
  ln -s $PREFIX/bin/opm             /usr/local/bin/opm
fi

if [ command -v update-alternatives 1>/dev/null 2>&1 ] ; then
  UPDATE_ALTERNATIVES="update-alternatives"
  if test $use_sudo -ne 0 ; then
      UPDATE_ALTERNATIVES="sudo ${UPDATE_ALTERNATIVES}"
  fi
  $UPDATE_ALTERNATIVES \
    --install /usr/bin/lua lua-interpreter $PREFIX/luajit/bin/lua 500
  $UPDATE_ALTERNATIVES \
    --install /usr/bin/luac lua-compiler $PREFIX/luajit/bin/luac 500
fi

export DISTRO
export RELEASE

if [ command -v readelf 1>/dev/null 2>&1 ] ; then
"${my_dir}/tools/lddsafe" -nq "$PREFIX"/nginx/sbin/nginx | "${my_dir}/tools/find-deps" | while read dep; do
  if $use_sudo -ne 0 ; then
    sudo "${my_dir}/tools/mark-explicit" "${dep}"
  else
    "${my_dir}/tools/mark-explicit" "${dep}"
  fi
done
fi

printf "OpenResty setup complete\n"
